// Generated by manage-types script
import { Transaction } from './transaction';
import { ReactNode } from 'react';
import { TypeSummary } from './type';

export interface AddLendingFormProps {
  onAddLending: () => void;
}

export interface BudgetSummaryChartProps {
  selectedMonth: string;
}

export interface ChartData {
  type: string;
  Allocated: number;
  Spent: number;
  name: string;
  value: number;
  active: boolean;
}

export interface BudgetSummaryTableProps {
  className?: string;
  userId: string;
  selectedMonth: string;
  parentTransactions: any[];
}

export interface LayoutProps {
  children: ReactNode;
}

export interface Lending {
  id: string;
  borrower: string;
  amount: number;
  date: string;
  period: string;
  reminderfrequency: string;
  user_email: string;
}

export interface LoadingProps {
  message?: string;
}

export interface TabsProps {
  className?: string;
  selectedMonth: string;
  // 1-based
  onMonthChange: (newMonth: string) => void;
}

export interface SignInFormProps {
  onToggleForm: () => void;
}

export interface SignUpFormProps {
  onToggleForm: () => void;
}

export interface Column {
  label: string;
  field: string;
  visible: boolean;
  format?: (value: number) => string;
  render?: (txn: Transaction) => JSX.Element;
}

export interface HandleDelete {
  (txnId: string): Promise<void>;
}

export interface HandleRowClick {
  (txn: Transaction): void;
}

export interface LendingState {
  lendings: Lending[];
  loading: boolean;
  error: string | null;
}

export interface SummaryState {
  data: Record<string, SummaryData>;
  loading: boolean;
  error: string | null;
}

export interface Income {
  amount: number;
  description?: string;
  date?: string;
}

export interface SummaryData {
  id?: number;
  user_id?: string;
  month: string;
  budget: number;
  types: TypeSummary[];
  transactions: any[];
  created_at?: string;
  updated_at?: string;
}

export interface SummaryState {
  data: { [key: string]: SummaryData };
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | null;
  loading: boolean;
  currentMonth: string;
}

export interface SyncQueue {
  id: string;
  action: 'create' | 'update' | 'delete';
  table: string;
  data: any;
  timestamp: number;
}